---
layout: post
title:  "弱类型、强类型、动态类型、静态类型"
date:   2021-01-25 10:30:11 +0800
categories: C++
---

类型系统的一些概念，众说纷纭，使用上也比较乱。有些东西，甚至不好严格定义。以下为一种相对严格的说法。

### 基础概念
#### Program Errorstrapped Errors
导致程序终止执行，如除0，Java中数组越界访问`untrapped errors`。 出错后继续执行，但可能出现任意行为。如C里的缓冲区溢出、Jump到错误地址

#### Forbidden Behaviours  
语言设计时，可以定义一组`forbidden behaviors`. 它必须包括所有`untrapped errors`, 但可能包含`trapped errors`.

#### Well behaved、ill behaved
如果程序执行不可能出现forbidden behaviors, 则为`well behaved`。否则为`ill behaved`

### 强、弱类型，静态、动态类型

#### 强、弱类型
  - strongly typed: 如果一种语言的所有程序都是`well behaved`—即不可能出现`forbidden behaviors`
  - weakly typed: 比如C语言的缓冲区溢出，属于`trapped errors`，即属于`forbidden behaviors` 故C是弱类型前面的人也说了，弱类型语言，类型检查更不严格，如偏向于容忍隐式类型转换。譬如说C语言的int可以变成double。 这样的结果是：容易产生`forbidden behaviours`，所以是弱类型的动态、
  
#### 静态类型、动态类型 
  - statically: 编译时拒绝`ill behaved`
  - dynamiclly: 运行时拒绝`ill behaviors`


### 误区
如果觉得C语言要写int a, int b之类的，Python不用写(可以直接写a, b)，所以C是静态，Python是动态。这么理解是不够准确的。譬如Ocaml是静态类型的，但是也可以不用明确地写出来。。Ocaml是静态隐式类型静态类型可以分为两种：如果类型是语言语法的一部分，在是explicitly typed显式类型；如果类型通过编译时推导，是implicity typed隐式类型, 比如ML和Haskell

### 例子
- 无类型： 汇编
- 弱类型、静态类型：C/C++
- 弱类型、动态类型检查： Perl/PHP
- 强类型、静态类型检查 ：Java/C#
- 强类型、动态类型检查 ：Python, Scheme
- 静态显式类型 ：Java/C
- 静态隐式类型 ：Ocaml, Haskell

![](Type.png)

注:本文转自 [知乎rainoftime的回答]

[知乎rainoftime的回答]: https://www.zhihu.com/question/19918532/answer/21647195